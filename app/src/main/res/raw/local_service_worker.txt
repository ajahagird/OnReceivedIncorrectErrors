const logDebug = (log) => console.log(log);


self.addEventListener("install", function (event) {
  console.log("[SW] installing..");
  self.skipWaiting();
});

const switchNavigationPreload = (shouldEnable) => {
   const navPreloadMgr = self.registration.navigationPreload;
  
  return (shouldEnable ? 
            navPreloadMgr.enable() : 
            navPreloadMgr.disable())
    .then(() => logDebug(`Navigation preload ${shouldEnable ? 'enabled' : 'disabled'}`))
    .catch(() => logDebug(`Error while ${shouldEnable ? 'enabling' : 'disabling'} nav preload`))
}


self.addEventListener("activate", function (event) {
  console.log("[SW] activating..");
  event.waitUntil(switchNavigationPreload(true));
});


addEventListener('fetch', event => {
  event.respondWith(async function() {
    // Respond from the cache if we can
    const cachedResponse = await caches.match(event.request);
    if (cachedResponse) return cachedResponse;

    // Else, use the preloaded response, if it's there
    const response = await event.preloadResponse;
    if (response) return response;

    // Else try the network.
    return fetch(event.request)
      .catch(function(error) {
          logDebug('[SW] network error occurred!');
          let message = "Network error encountered!";
          return new Response(message, { status: 404, statusText: 'Not Found', 
                       headers: { 'Content-Type': 'text/html' }});
      });
    
  }());
});
